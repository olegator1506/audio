#include <stdio.h>
#include "esp_types.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "driver/periph_ctrl.h"
#include "driver/timer.h"
#include "esp_log.h"
#include "esp_event.h"
#include "esp_system.h"
#include <driver/adc.h>
#include "display.h"
#include <math.h>
//#include <soc/sens_reg.h>
//#include <soc/sens_struct.h>


#define TIMER_DIVIDER         800  //  Частота CLK таймера 100 Кгц (80 Мгц / 800)
#define TIMER_SCALE           (TIMER_BASE_CLK / TIMER_DIVIDER)  // convert counter value to seconds
#define TIMER_INTERVAL   (0.001)   // sample test interval for the second timer
#define TEST_WITHOUT_RELOAD   0        // testing will be done without auto reload
#define TEST_WITH_RELOAD      1        // testing will be done with auto reload
#define VU_SAMPLE_COUNT 100
#define VU_LEVEL_DIVIDER 20 // Преобразование значения ADC в % громкости (Level =ADC /VU_LEVEL_DIVIDER);
// Входы аудиосигнала
#define VU_ADC_CH_LEFT ADC1_CHANNEL_4 // IO32
#define VU_ADC_CH_RIGHT ADC1_CHANNEL_6 // IO34

#define VU_0DB_LEVEL 1.5 //уровень напряжения принимаемый за 0 dB

portMUX_TYPE DRAM_ATTR timerMux = portMUX_INITIALIZER_UNLOCKED;
uint32_t _vuSum[2] = {0,0}; // Здесь суммируем отсчеты ADC
uint16_t _vuSampleCnt = 0; // количество отcчетов, по достижении VU_SAMPLE_COUNT генерим событие и сбрасываем сумматор и счетчик

static const char *TAG="vu-meter";
/*
 * A sample structure to pass events
 * from the timer interrupt handler to the main program.
 */
typedef struct {
    uint16_t left,right; 
} timer_event_t;

xQueueHandle timer_queue;

/*
 * A simple helper function to print the raw timer counter value
 * and the counter value converted to seconds
 */
static void inline print_timer_counter(uint64_t counter_value)
{
    printf("Counter: 0x%08x%08x\n", (uint32_t) (counter_value >> 32),
                                    (uint32_t) (counter_value));
    printf("Time   : %.8f s\n", (double) counter_value / TIMER_SCALE);
}
/*
int IRAM_ATTR local_adc1_read(int channel) {
    uint16_t adc_value;
    SENS.sar_meas_start1.sar1_en_pad = (1 << channel); // only one channel is selected
    while (SENS.sar_slave_addr1.meas_status != 0);
    SENS.sar_meas_start1.meas1_start_sar = 0;
    SENS.sar_meas_start1.meas1_start_sar = 1;
    while (SENS.sar_meas_start1.meas1_done_sar == 0);
    adc_value = SENS.sar_meas_start1.meas1_data_sar;
    return adc_value;
}
*/
/*
 * Timer group0 ISR handler
 *
 * Note:
 * We don't call the timer API here because they are not declared with IRAM_ATTR.
 * If we're okay with the timer irq not being serviced while SPI flash cache is disabled,
 * we can allocate this interrupt without the ESP_INTR_FLAG_IRAM flag and use the normal API.
 */
void IRAM_ATTR timer_group0_isr(void *para)
{

    int timer_idx = (int) para;

    /* Retrieve the interrupt status and the counter value
       from the timer that reported the interrupt */
//    timer_intr_t timer_intr = timer_group_intr_get_in_isr(TIMER_GROUP_0);
//    uint64_t timer_counter_value = timer_group_get_counter_value_in_isr(TIMER_GROUP_0, timer_idx);
    /* Prepare basic event data
       that will be then sent back to the main program task */
    timer_group_intr_clr_in_isr(TIMER_GROUP_0, TIMER_1);
    timer_group_enable_alarm_in_isr(TIMER_GROUP_0, timer_idx);
portENTER_CRITICAL_ISR(&timerMux);
    adc1_config_channel_atten(VU_ADC_CH_LEFT,ADC_ATTEN_DB_0);
    adc1_config_channel_atten(VU_ADC_CH_RIGHT,ADC_ATTEN_DB_0);
    _vuSum[0] += adc1_get_raw(VU_ADC_CH_LEFT);
    _vuSum[1] += adc1_get_raw(VU_ADC_CH_RIGHT);
//    _vuSum[0] += local_adc1_read(VU_ADC_CH_LEFT);
//    _vuSum[1] += local_adc1_read(VU_ADC_CH_RIGHT);

    _vuSampleCnt++;
    if(_vuSampleCnt == VU_SAMPLE_COUNT) {
        timer_event_t evt;
        evt.left = _vuSum[0] / VU_SAMPLE_COUNT;
        evt.right = _vuSum[1] / VU_SAMPLE_COUNT;
        xQueueSendFromISR(timer_queue, &evt, NULL);
        _vuSampleCnt = 0;
        _vuSum[0] = 0;
        _vuSum[1] = 0;
    }
portEXIT_CRITICAL_ISR(&timerMux);    
}


/*
 * Initialize selected timer of the timer group 0
 *
 * timer_idx - the timer number to initialize
 * auto_reload - should the timer auto reload on alarm?
 * timer_interval_sec - the interval of alarm to set
 */
static void _timerInit(int timer_idx,
    double timer_interval_sec)
{
    /* Select and initialize basic parameters of the timer */
    timer_config_t config;
    config.divider = TIMER_DIVIDER;
    config.counter_dir = TIMER_COUNT_UP;
    config.counter_en = TIMER_PAUSE;
    config.alarm_en = TIMER_ALARM_EN;
    config.intr_type = TIMER_INTR_LEVEL;
    config.auto_reload = true;
    timer_init(TIMER_GROUP_0, timer_idx, &config);

    /* Timer's counter will initially start from value below.
       Also, if auto_reload is set, this value will be automatically reload on alarm */
    timer_set_counter_value(TIMER_GROUP_0, timer_idx, 0x00000000ULL);

    /* Configure the alarm value and the interrupt on alarm. */
    timer_set_alarm_value(TIMER_GROUP_0, timer_idx, timer_interval_sec * TIMER_SCALE);
    timer_enable_intr(TIMER_GROUP_0, timer_idx);
    timer_isr_register(TIMER_GROUP_0, timer_idx, timer_group0_isr,
        (void *) timer_idx, ESP_INTR_FLAG_IRAM, NULL);

    timer_start(TIMER_GROUP_0, timer_idx);
    }

static float adcToDb(uint16_t adcVal) {
    if(adcVal == 0 ) return -21;
    float volt =  adcVal * 0.71  /1000; 
    float db = 20 * log10(volt / VU_0DB_LEVEL);
    return db;
}

static void timer_example_evt_task(void *arg)
{
    while (1) {
        timer_event_t evt;
        xQueueReceive(timer_queue, &evt, portMAX_DELAY);
        displaySetLevelDb(0,adcToDb(evt.left));
        displaySetLevelDb(1,adcToDb(evt.right));
//        printf("%f %f\n",adcToDb(evt.left),adcToDb(evt.right));
    }
}

esp_err_t vuMeterInit(void){
    timer_queue = xQueueCreate(10, sizeof(timer_event_t));
    adc1_config_width(ADC_WIDTH_BIT_12);
    adc1_config_channel_atten(VU_ADC_CH_LEFT,ADC_ATTEN_DB_0);
    adc1_config_channel_atten(VU_ADC_CH_RIGHT,ADC_ATTEN_DB_0);
    _timerInit(TIMER_1, TIMER_INTERVAL);
    xTaskCreate(timer_example_evt_task, "timer_evt_task", 2048, NULL, 5, NULL);
    ESP_LOGI(TAG,"Task started");
    return ESP_OK;
}
